//把这个目录变成Git可以管理的仓库
git init
//文件添加到仓库
git add README.md 
//不但可以跟单一文件，还可以跟通配符，更可以跟目录。一个点就把当前目录下所有未追踪的文件全部add了 
git add . 
//把文件提交到仓库
git commit -m "first commit" 
//关联远程仓库
//创建一个origin的本地仓库 并关联到git的地址
git remote add origin git@github.com:wangjiax9/practice.git 
//git创建项目之后有个默认的master分支，将本地创建的origin的仓库内容push到 远程的master分支上
git push -u origin master 



git 创建分支
切换到基础分支，如主干
git checkout master
创建并切换到新分支
git checkout -b panda
git branch可以看到已经在panda分支上
更新分支代码并提交
git add *
git commit -m "init panda"
git push origin panda


//把git上的项目拷贝到本地
git clone  git@github.com:wangjiax9/practice.git 
git config --global user.name "xxx"
git config --global user.email "xxx"

//生成git 公钥
ssh-keygen -t rsa -C "用户名"

git 删除本地分支
git branch -D branchName
git 删除远程分支
git push origin :branchName  (origin 后面有空格)

git更新远程新分支
git remote update origin --prune


git stash 命令是储藏命令。 

1. 可以用来储藏工作的中间状态，
 
2. 也可以将储藏好的中间状态应用到现有的工作中。 

主要的命令有 

1. git stash 
当本地有修改的时候，只要运行git stash 就可以将本地的更改储藏起来。 

2. git stash list 
可以用来查看储藏起来的状态。如下 
stash@{0}: WIP on master: ece766d package struct 

3. git stash apply 
可以用来应用储藏的状态。比如 git stash apply 0 就会应用储藏id为0 的中间状态
